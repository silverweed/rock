-- quicksort
a := [4 2 3 5 6 1 8 10 44 42
call quicksort a 
say $res
die

-- quicksorts an array and returns a copy of it
quicksort: v
	n := len v
	jumpif quicksort_end n <= 1
	h := floor n / 2
	pivot := v[h]
	-- get array of elements <= pivot
	call get_inf v pivot h
	inf := $res
	-- get array of elements > pivot
	call get_sup v pivot h
	sup := $res
	call quicksort inf
	a1 := $res
	call quicksort sup
	a2 := $res
	res := flatten append a1 pivot a2
	return res
quicksort_end:
	return v

-- given array v, returns an array with all elements
-- of v which are <= n, skipping element #j
get_inf: v n j
	-- create empty array
	tmp := [
	l := len v
	i := 0
get_inf_loop:
	jumpif get_inf_end i == l
	e := v[i]
	jumpif get_inf_loop_end e > n
	jumpif get_inf_loop_end i == j
	jumpif get_inf_assign_tmp not ? tmp[0]
	tmp = append tmp e
	jump get_inf_loop_end
get_inf_assign_tmp:
	tmp = [e
get_inf_loop_end:
	i = i + 1
	jump get_inf_loop
get_inf_end:
	return tmp

get_sup: v n j
	tmp := [
	l := len v
	i := 0
get_sup_loop:
	jumpif get_sup_end i == l
	e := v[i]
	jumpif get_sup_loop_end e <= n
	jumpif get_sup_loop_end i == j
	jumpif get_sup_assign_tmp not ? tmp[0]
	tmp = append tmp e
	jump get_sup_loop_end
get_sup_assign_tmp:
	tmp = [e
get_sup_loop_end:
	i = i + 1
	jump get_sup_loop
get_sup_end:
	return tmp
